{"meta":{"title":"Dudulu","subtitle":"","description":"","author":"dudulu","url":"https://www.dudu2.xyz","root":"/"},"pages":[{"title":"404","date":"2021-03-26T12:19:43.000Z","updated":"2021-03-26T12:20:07.687Z","comments":true,"path":"404/index.html","permalink":"https://www.dudu2.xyz/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-03-26T12:17:53.000Z","updated":"2021-03-26T12:18:12.942Z","comments":true,"path":"about/index.html","permalink":"https://www.dudu2.xyz/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-03-26T07:50:49.000Z","updated":"2021-03-26T12:18:39.173Z","comments":true,"path":"categories/index.html","permalink":"https://www.dudu2.xyz/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-03-26T12:18:48.000Z","updated":"2021-03-26T12:19:01.684Z","comments":true,"path":"tags/index.html","permalink":"https://www.dudu2.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"英语单词-4.3","slug":"英语单词-4-3","date":"2021-04-03T05:45:30.000Z","updated":"2021-04-06T05:58:32.704Z","comments":true,"path":"2021/04/03/英语单词-4-3/","link":"","permalink":"https://www.dudu2.xyz/2021/04/03/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D-4-3/","excerpt":"prosecute: vt. 检举，贯彻，从事。 vi. 起诉，告发。 prosecutor 检查官 transition：n. 过渡，转变。","text":"prosecute: vt. 检举，贯彻，从事。 vi. 起诉，告发。 prosecutor 检查官 transition：n. 过渡，转变。 casualty：n. 意外事故，伤亡人员，急诊。 permeate：n. 渗透，弥漫。 refund：n. 退款 v.退款，退还。 linger：vi. 徘徊 vt. 消磨 converge：vt. 使汇聚 vi.聚集，靠拢。 associate：v. 联想，使关联。 royalty：n. 皇室，王权。 transmit：vi. 运输。 vt. 传输，发射，遗传。 mock：v. 嘲笑，(通过模仿)嘲弄。 incentive：n. 动机，刺激。 overwhelm：vt. 淹没；压倒；受打击；压垮。 reliable：adj. 可靠的。 n. 可靠的人。 anticipate：v. 预料，预期，预见。","categories":[{"name":"English","slug":"English","permalink":"https://www.dudu2.xyz/categories/English/"}],"tags":[{"name":"English","slug":"English","permalink":"https://www.dudu2.xyz/tags/English/"}]},{"title":"Shell部分了解","slug":"Shell部分了解","date":"2021-04-02T14:50:02.000Z","updated":"2021-04-02T15:34:00.248Z","comments":true,"path":"2021/04/02/Shell部分了解/","link":"","permalink":"https://www.dudu2.xyz/2021/04/02/Shell%E9%83%A8%E5%88%86%E4%BA%86%E8%A7%A3/","excerpt":"部分赋值语法 变量=$(操作) ListScripts=$(cat $readList2;ls /ql/ql/scripts | grep \"^wh\" &amp;&amp; ls /ql/ql/scripts | grep \"^monk\")","text":"部分赋值语法 变量=$(操作) ListScripts=$(cat $readList2;ls /ql/ql/scripts | grep \"^wh\" &amp;&amp; ls /ql/ql/scripts | grep \"^monk\") 变量=$(带正则表达式过滤) ListDiyScripts=$(ls /ql/ql/scripts | grep \"^wh\" &amp;&amp; ls /ql/ql/scripts | grep \"^monk\") 读取用户输入 # ... read count # 读取一个输入 read -p \"请输入:\"# 指定提示符,或者指定多个变量 read -t # 等待的秒数 array=$* # 传递所有参数 循环和条件和数组 for i in ${array[@]} # 循环数组 do if [ \"$name\" == \"${!#}\" ]; then break; fi # ${!#}是否是最后一个函数接收的参数 if [ \"${name#*.}\" != \"js\" ]; then name=${name%.}.js; fi # 是否后缀名是js if [ -f \"$readList1/$name\" ] # 当前文件夹是否存在该文件 if [ -d \"$filePath\" ] # 对应的文件夹中是否存在查找的文件夹 elif then 内容 fi ${jsName#*_} # \"_\"当前行后面的所有内容 arr[${#arr[*]}]=${name} # 往数组后面添加元素 done case语句 case $input in 'a') # 对应内容 run $ListScripts all # 输入a 则执行该命令 ;; # 切记用双分号结尾 esac # 结尾。if、case语句都是这样反向包围 其他的乱七八糟z allfile=`ls $filePath` # 将执行语句的内容复制给allfile # 利用grep + ${name#/%*中正则} 筛选正则之后或者之前的内容 text=`cat $filePath/${arr[-1]} | grep \"互助码】\"` # echo $text for hzm in $text do arrList[${#arrList[*]}]=${hzm#*互助码】} done echo $format${arrList[@]}","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Shell","slug":"study/Shell","permalink":"https://www.dudu2.xyz/categories/study/Shell/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://www.dudu2.xyz/tags/Vue/"}]},{"title":"Vue基础","slug":"Vue基础","date":"2021-03-30T07:42:29.000Z","updated":"2021-03-31T13:10:31.737Z","comments":true,"path":"2021/03/30/Vue基础/","link":"","permalink":"https://www.dudu2.xyz/2021/03/30/Vue%E5%9F%BA%E7%A1%80/","excerpt":"1. 声明 创建一个Vue实例： var app2 = new Vue({ el: '#app', data: { message: '' } })","text":"1. 声明 创建一个Vue实例： var app2 = new Vue({ el: '#app', data: { message: '' } }) 实例的生命周期钩子： created：在实例被创建之后执行 mounted：在实例被挂载的时候执行 updated：在实例被更新时执行 destroyed：在实例被销毁后执行 不要在选项 property 或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch('a', newValue =&gt; this.myMethod())。/*因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。*/ 2. 模板语法 使用：{{}} ,双大括号形式使用，Mustache语法 指令 v-once：一次性的插入 v-html：将数据解析成html代码 v-if：条件判断 v-else v-if-else v-on(@)：绑定事件 v-bind(:)：响应式更新 动态参数： &lt;a v-bind:[attributeName]=\"url\"&gt; ... &lt;/a&gt; 3. 计算属性 用于存放逻辑运算的属性 &lt;div id=\"example\"&gt; &lt;p&gt;Original message: \"{{ message }}\"&lt;/p&gt; &lt;p&gt;Computed reversed message: \"{{ reversedMessage }}\"&lt;/p&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: '#example', data: { message: 'Hello' }, computed: { // 计算属性的 getter reversedMessage: function () { // `this` 指向 vm 实例 return this.message.split('').reverse().join('') } } }) &lt;/script&gt; vs方法 计算属性基于响应式依赖进行缓存。可用于多次重复访问。 方法可以不依赖响应式，每次调用都会重新执行。 计算属性 VS 侦听属性 侦听属性：watch //在vue实例中... watch: { firstName: function (val) { this.fullName = val + ' ' + this.lastName }, lastName: function (val) { this.fullName = this.firstName + ' ' + val } } 计算属性setter 被设置时会更新 4. 侦听器 虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。 作用：响应数据的变化 当数据变化时执行异步或开销较大的操作时，最有用。 列如： &lt;div id=\"watch-example\"&gt; &lt;p&gt; Ask a yes/no question: &lt;input v-model=\"question\"&gt; &lt;/p&gt; &lt;p&gt;{{ answer }}&lt;/p&gt; &lt;/div&gt; &lt;script&gt; // vue实例中... watch: { // 如果 `question` 发生改变，这个函数就会运行 question: function (newQuestion, oldQuestion) { this.answer = 'Waiting for you to stop typing...' this.debouncedGetAnswer() } }, &lt;/script&gt; 我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。 5. Class 与 Style 绑定 动态切换class： &lt;div v-bind:class=\"{active: isActive}\"&gt; &lt;/div&gt; 多个字段 &lt;div v-bind:class=\"{ active: isActive}, 'text-danger':hasError}\"&gt; &lt;/div&gt; &lt;scrit&gt; // vue实例中 data: { isActive: true, hasError: true }, computed: { classObject: function() { return { active: this.isActive &amp;&amp; !this.error, 'text-danger': this.error &amp;&amp; this.error.type === 'fatal' } } } &lt;/scrit&gt; // 结果渲染为 &lt;div class=\"active text-danger\"&gt; &lt;/div&gt; 数组语法 绑定内联样式 &lt;div v-bind:style=\"styleObject\"&gt;&lt;/div&gt; data: { styleObject: { activeColor: 'red', fontSize: 30 } } 6. 条件渲染 v-if &lt;h1 v-if=\"awesome\"&gt;Vue is awesome!&lt;/h1&gt; &lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt; v-else v-else-if 用key管理可复用的元素 添加唯一值key：表示两个元素完全独立不要复用 v-show 会创建DOM元素 满足条件显示，否则隐藏 如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好 不推荐同时使用 v-if 和 v-for 7. 列表渲染 基本使用 &lt;li v-for=\"item in items\" :key=\"item.message\"&gt; {{ item.message }} &lt;/li&gt; 可选第二个参数，索引 &lt;li v-for=\"(item, index) in items\"&gt; {{ parentMessage }} - {{ index }} - {{ item.message }} &lt;/li&gt; of 替代 in 作为分隔符 &lt;div v-for=\"item of items\"&gt;&lt;/div&gt; 遍历对象 // 值，属性 &lt;div v-for=\"(value, name) in object\"&gt; {{ name }}: {{ value }} &lt;/div&gt; // 值，属性，下标 &lt;div v-for=\"(value, name, index) in object\"&gt; {{ index }}. {{ name }}: {{ value }} &lt;/div&gt; 维护状态 添加key值 数组更新检测 变更方法 push() pop() shift() unshift() splice() splice() sort() reverse() 替换数组:不会变更原始数据，而总是返回一个新数组 filter()：过滤 concat()： slice() 8. 事件处理 监听事件：v-on &lt;button v-on:click=\"counter += 1\"&gt;Add 1&lt;/button&gt; 事件处理方法 event: 原生DOM事件 this：指向Vue实例 内联处理器中的方法 直接绑定&lt;button v-on:click=\"say('hi')\"&gt;Say hi&lt;/button&gt; $event：DOM事件 &lt;button v-on:click=\"warn('Form cannot be submitted yet.', $event)\"&gt; Submit &lt;/button&gt; 事件修饰符 .stop .prevent .capture .self .once .passive &lt;!-- 阻止单击事件继续传播 --&gt; &lt;a v-on:click.stop=\"doThis\"&gt;&lt;/a&gt; &lt;!-- 提交事件不再重载页面 --&gt; &lt;form v-on:submit.prevent=\"onSubmit\"&gt;&lt;/form&gt; &lt;!-- 修饰符可以串联 --&gt; &lt;a v-on:click.stop.prevent=\"doThat\"&gt;&lt;/a&gt; &lt;!-- 只有修饰符 --&gt; &lt;form v-on:submit.prevent&gt;&lt;/form&gt; &lt;!-- 添加事件监听器时使用事件捕获模式 --&gt; &lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt; &lt;div v-on:click.capture=\"doThis\"&gt;...&lt;/div&gt; &lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt; &lt;!-- 即事件不是从内部元素触发的 --&gt; &lt;div v-on:click.self=\"doThat\"&gt;...&lt;/div&gt; v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。 Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。 &lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt; &lt;!-- 而不会等待 `onScroll` 完成 --&gt; &lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt; &lt;div v-on:scroll.passive=\"onScroll\"&gt;...&lt;/div&gt; 按键修饰符 keyCode .enter .tab .delete (捕获“删除”和“退格”键) .esc .space .up .down .left .right config.keyCodes 对象自定义按键修饰符别名： Vue.config.keyCodes.f1 = 112 系统修饰符 .ctrl .alt .shift .meta &lt;!-- Alt + C --&gt; &lt;input v-on:keyup.alt.67=\"clear\"&gt; &lt;!-- Ctrl + Click --&gt; &lt;div v-on:click.ctrl=\"doSomething\"&gt;Do something&lt;/div&gt; exact修饰符 .exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。 &lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt; &lt;button v-on:click.ctrl=\"onClick\"&gt;A&lt;/button&gt; &lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt; &lt;button v-on:click.ctrl.exact=\"onCtrlClick\"&gt;A&lt;/button&gt; &lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt; &lt;button v-on:click.exact=\"onClick\"&gt;A&lt;/button&gt; 鼠标按钮修饰符 .left .right .middle","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://www.dudu2.xyz/tags/Vue/"}]},{"title":"Vue路由","slug":"Vue路由","date":"2021-03-29T04:17:05.000Z","updated":"2021-03-31T07:37:12.172Z","comments":true,"path":"2021/03/29/Vue路由/","link":"","permalink":"https://www.dudu2.xyz/2021/03/29/Vue%E8%B7%AF%E7%94%B1/","excerpt":"","text":"一、Vue中的路由 定义：通过互联的网络把信息从源地址传输道目的地址的活动。 IP地址：标识 映射表：mac地址，唯一标识 路由器：管理ip 什么是前端渲染，什么是后端渲染？ 后端渲染：jsp/php，比较混乱。 前后端分离阶段：Ajax 后端只负责提供数据，不负责任何阶段的内容。 SPA页面(单页面富应用) 整个网页只有一个html页面 特点：在前后端分离的基础上加了一层前端路由，前端来维护一套路由规则 前端路由核心： 改变URL，但是页面不进行整体的刷新 二、 vue-router 使用步骤 导入路由对象，并且调用Vue.use(VueRouter) 安装：yarn add vue-router --save 创建router文件夹，在其中创建index.js文件。 创建路由实例，并且传入路由映射配置。 在Vue实例中挂载创建的路由实例 // 导入路由相关的配置 import VueRouter from 'vue-router' import Vue from 'vue' // 1.通过Vue.use(插件)，安装插件 Vue.use(VueRouter) // 2.设置路由映射关系 const routes = [] // 3.创建实例 const router = new VueRouter({ routes, mode: 'history' // 使用history模式。去除# }) // 4.导出 export default router // 5.在main.js导入router import router from './router' ...({ router, ... }) routes映射对象： const routes = [ { path: '', // 路由地址 component: null // 组件 },{ path: '', redirect: '' // 重定向路由地址,一般用于配置默认页面 } ] App.vue中使用： // 方式一：&lt;router-link&gt;&lt;/router-link&gt;,最终被渲染成&lt;a&gt;&lt;/a&gt;标签 &lt;router-link to=\"/home\"&gt;&lt;/router-link&gt; // 方式二：绑定点击事件 // 必须使用 &lt;router-view&gt;&lt;/router-view&gt; // 渲染router to: 跳转 tag: 指定渲染成什么组件 replace：关闭返回 路由中： // index.js文件 ... linkActiveClass: '' // 统一修改属性","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://www.dudu2.xyz/tags/Vue/"}]},{"title":"Vue-router-tabbar","slug":"Vue-router-tabbar","date":"2021-03-27T14:33:18.000Z","updated":"2021-03-28T15:36:08.230Z","comments":true,"path":"2021/03/27/Vue-router-tabbar/","link":"","permalink":"https://www.dudu2.xyz/2021/03/27/Vue-router-tabbar/","excerpt":"一. banner模块的编写 创建tabbar组件，在tabbar组件中创建插槽slot &lt;div id=\"app\"&gt; &lt;div id=\"tabbar\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt; &lt;/div&gt;","text":"一. banner模块的编写 创建tabbar组件，在tabbar组件中创建插槽slot &lt;div id=\"app\"&gt; &lt;div id=\"tabbar\"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt; &lt;/div&gt; tabbar组件中插槽对应的TabbarItem组件 &lt;template&gt; &lt;div class=\"tabbar-item\" @click=\"itemClick\"&gt; &lt;div v-if=\"!isActive\"&gt;&lt;slot name=\"item-icon\"&gt;&lt;/slot&gt;&lt;/div&gt; &lt;div v-else&gt;&lt;slot name=\"item-active-icon\"&gt;&lt;/slot&gt;&lt;/div&gt; &lt;div :class=\"{active: isActive}\"&gt;&lt;slot name=\"item-text\"&gt;&lt;/slot&gt;&lt;/div&gt; &lt;/div&gt; &lt;/template&gt; 在TabbarItem组件中配置插槽给App.vue组件预留位置 &lt;slot name=\"item-icon\"&gt;&lt;/slot&gt; &lt;slot name=\"item-active-icon\"&gt;&lt;/slot&gt; &lt;slot name=\"item-text\"&gt;&lt;/slot&gt; App组件中导入Tabbar和 TabbarItem组件。 &lt;script&gt; import Tabbar from \"./components/tabbar/Tabbar.vue\"; import TabbarItem from \"./components/tabbar/TabbarItem.vue\"; &lt;/script&gt; &lt;table&gt; &lt;table-item&gt;&lt;/table-item&gt; &lt;/table&gt; 组件中导入css文件 &lt;style&gt; @import \"文件路径\" &lt;/style&gt; 二. router路由的配置 下载vue-router包 yarn add vue-router --save * --save 运行环境 * --dev 开发环境 在router文件夹中创建index.js文件 import Vue from \"vue\" import VueRouter from \"vue-router\" // 1.安装插件 Vue.use(VueRouter) // VueRouter.install // 2.创建路由对象 const routes = [] // 不能加r const router = new VueRouter({ routes, mode: 'history' }) // 3.导出router export default router 在main.js中导入router即可 routes中：path：路由地址，redirect: 重定向，component: 对应组件 导入路由组件懒加载方式：```const Home = () =&gt; import(‘地址’) 使用路由： // 标签添加点击属性 &lt;div @click=\"itemClick\"&gt; 内容 &lt;/div&gt; // 在script点击事件中添加路由路径 &lt;script&gt; export default { props: { path: String // 规定父传子的数据格式 },computed: { isActive() { return !this.$route.path.indexOf(this.path) // 判断点击是否是当前路由。 // $route 表示当前活跃的路由 } }, methods: { itemClick() { this.$router.replace(this.path) // $router 全局变量 } } } &lt;/script&gt; 注意事项 多次点击同一路由console报错： // 在main.js中添加 // 防止点击两次报错 const originalPush = Router.prototype.push; Router.prototype.push = function push(location) { return originalPush.call(this, location).catch(err =&gt; err) } const originalReplace = Router.prototype.replace; Router.prototype.replace = function replace(location) { return originalReplace.call(this, location).catch(err =&gt; err); } 注意组件之间的抽离。不同功能页面文件的划分 注意views文件夹的规划 父传子props： props:{ path: String, activeColor: { type: String, default() { return \"red\" // 父组件默认值会覆盖子组件，需要用函数返回出去 } } } 当传入的属性值过于长时，可以使用计算属性： computed: { isActive() { return !this.$route.path.indexOf(this.path) }, activeStyle() { return this.isActive ? {color: this.activeColor} : {} } }, 根据父组件传过来的颜色值来显示点击时tabbarItem的文本颜色","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://www.dudu2.xyz/tags/Vue/"}]},{"title":"vue-cli","slug":"vue-cli","date":"2021-03-26T09:06:40.000Z","updated":"2021-03-26T10:49:55.246Z","comments":true,"path":"2021/03/26/vue-cli/","link":"","permalink":"https://www.dudu2.xyz/2021/03/26/vue-cli/","excerpt":"","text":"这是Vue-cli","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"}],"tags":[]},{"title":"Magisk","slug":"Magisk","date":"2021-03-26T05:32:27.000Z","updated":"2021-03-26T05:33:29.491Z","comments":true,"path":"2021/03/26/Magisk/","link":"","permalink":"https://www.dudu2.xyz/2021/03/26/Magisk/","excerpt":"","text":"","categories":[{"name":"Android","slug":"Android","permalink":"https://www.dudu2.xyz/categories/Android/"}],"tags":[]},{"title":"Vue学习记录","slug":"Vue学习记录","date":"2021-03-26T05:20:14.000Z","updated":"2021-03-26T10:50:04.238Z","comments":true,"path":"2021/03/26/Vue学习记录/","link":"","permalink":"https://www.dudu2.xyz/2021/03/26/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","excerpt":"","text":"Vue学习记录","categories":[{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"}],"tags":[]},{"title":"自建hexo+github","slug":"自建hexo+github","date":"2021-03-25T09:55:37.000Z","updated":"2021-03-26T10:50:34.729Z","comments":true,"path":"2021/03/25/自建hexo+github/","link":"","permalink":"https://www.dudu2.xyz/2021/03/25/%E8%87%AA%E5%BB%BAhexo+github/","excerpt":"一. 必备 Nodejs Git github","text":"一. 必备 Nodejs Git github 二. 创建部署Hexo 创建一个空的文件夹用于存储，例：blog NPM安装hexo：npm install -g(全局) hexo 测试：hexo 三. 初始化Hexo 进入创建的文件夹blog 初始化命令： hexo init 构建Hexo：hexo g 启动Hexo：hexo s 进入：localhost:4000 四. 部署Hexo到Github 创建Github账号以及仓库(仓库名称要以github.io为结尾)。 win10创建密钥：ssh-keygen -t rsa -C “GitHub 邮箱”。 win10查看密钥：cat ~/.ssh/id_rsa.pub github配置密钥：账号 -&gt; 设置 -&gt; SSH and GPG keys 修改本地配置文件：_config.yml -&gt; 末尾 -&gt; deploy: type: 'git' repo: github仓库地址 开始提交到github：hexo d 访问链接：仓库-&gt; Settings -&gt; GitHub Pages 选择分支，目录。保存即可出现链接 五. 注意事项 部署成功后访问github.io出现图片加载失败： _config.yml -&gt; URL注释下 -&gt; root: /仓库名称 更改主题：theme: 主题名 清除：hexo clean 重新构建部署：hexo g -d","categories":[{"name":"other","slug":"other","permalink":"https://www.dudu2.xyz/categories/other/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://www.dudu2.xyz/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"English","slug":"English","permalink":"https://www.dudu2.xyz/categories/English/"},{"name":"study","slug":"study","permalink":"https://www.dudu2.xyz/categories/study/"},{"name":"Shell","slug":"study/Shell","permalink":"https://www.dudu2.xyz/categories/study/Shell/"},{"name":"Vue","slug":"study/Vue","permalink":"https://www.dudu2.xyz/categories/study/Vue/"},{"name":"Android","slug":"Android","permalink":"https://www.dudu2.xyz/categories/Android/"},{"name":"other","slug":"other","permalink":"https://www.dudu2.xyz/categories/other/"}],"tags":[{"name":"English","slug":"English","permalink":"https://www.dudu2.xyz/tags/English/"},{"name":"Vue","slug":"Vue","permalink":"https://www.dudu2.xyz/tags/Vue/"},{"name":"随笔","slug":"随笔","permalink":"https://www.dudu2.xyz/tags/%E9%9A%8F%E7%AC%94/"}]}