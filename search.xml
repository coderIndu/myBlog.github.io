<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue基础</title>
      <link href="2021/03/30/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/30/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h4><ol><li><p>创建一个Vue实例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>        message<span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><span id="more"></span><ol start="2"><li><p>实例的生命周期钩子：</p><ol><li><p><font color="red">created</font>：在实例被创建之后执行</p></li><li><p><font color="red">mounted</font>：在实例被挂载的时候执行</p></li><li><p><font color="red">updated</font>：在实例被更新时执行</p></li><li><p><font color="red">destroyed</font>：在实例被销毁后执行</p></li><li><p>不要在选项 property 或回调上使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>，比如</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> 或 vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token parameter">newValue</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>。<span class="token comment">/*因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><img src="https://cn.vuejs.org/images/lifecycle.png"></li></ol></li></ol><hr><h4 id="2-模板语法"><a href="#2-模板语法" class="headerlink" title="2. 模板语法"></a>2. 模板语法</h4><ol><li><p>使用：<code>{{}}</code> ,双大括号形式使用，Mustache语法</p></li><li><p><font color="red">指令</font></p><ul><li>v-once：一次性的插入</li><li>v-html：将数据解析成html代码</li><li>v-if：条件判断<ul><li>v-else</li><li>v-if-else</li></ul></li><li>v-on(@)：绑定事件</li><li>v-bind(:)：响应式更新</li></ul></li><li><p>动态参数：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h4 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h4><ol><li><p><strong>用于存放逻辑运算的属性</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div id="example"&gt;  &lt;p&gt;Original message: "{{ message }}"&lt;/p&gt;  &lt;p&gt;Computed reversed message: "{{ reversedMessage }}"&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({      el: '#example',      data: {        message: 'Hello'      },      computed: {        // 计算属性的 getter        reversedMessage: function () {          // `this` 指向 vm 实例          return this.message.split('').reverse().join('')        }      }    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>vs方法</strong></p><ol><li>计算属性基于响应式依赖进行缓存。可用于多次重复访问。</li><li>方法可以不依赖响应式，每次调用都会重新执行。</li></ol></li><li><p><strong>计算属性 VS 侦听属性</strong></p><ol><li><p>侦听属性：watch</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">//在vue实例中...watch: {firstName: function (val) {      this.fullName = val + ' ' + this.lastName    },    lastName: function (val) {      this.fullName = this.firstName + ' ' + val    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>计算属性setter</p><ol><li>被设置时会更新</li></ol></li></ol><hr><h4 id="4-侦听器"><a href="#4-侦听器" class="headerlink" title="4. 侦听器"></a>4. 侦听器</h4><ol><li><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。</p></li><li><p>作用：响应数据的变化</p></li><li><p>当数据变化时执行异步或开销较大的操作时，最有用。</p></li><li><p>列如：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div id="watch-example"&gt;  &lt;p&gt;    Ask a yes/no question:    &lt;input v-model="question"&gt;  &lt;/p&gt;  &lt;p&gt;{{ answer }}&lt;/p&gt;&lt;/div&gt;&lt;script&gt;// vue实例中...    watch: {    // 如果 `question` 发生改变，这个函数就会运行    question: function (newQuestion, oldQuestion) {      this.answer = 'Waiting for you to stop typing...'      this.debouncedGetAnswer()    }  },&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p></li></ol><hr><h4 id="5-Class-与-Style-绑定"><a href="#5-Class-与-Style-绑定" class="headerlink" title="5. Class 与 Style 绑定"></a>5. Class 与 Style 绑定</h4><ol><li><p>动态切换class：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-bind:class="{active: isActive}"&gt; &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>多个字段</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-bind:class="{ active: isActive}, 'text-danger':hasError}"&gt;    &lt;/div&gt;&lt;scrit&gt;    // vue实例中data: {    isActive: true,    hasError: true    },    computed: {    classObject: function() {    return {    active: this.isActive &amp;&amp; !this.error,    'text-danger': this.error &amp;&amp; this.error.type === 'fatal'        }    }    }&lt;/scrit&gt;// 结果渲染为&lt;div class="active text-danger"&gt;    &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数组语法</p></li><li><p><strong>绑定内联样式</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-bind:style="styleObject"&gt;&lt;/div&gt;data: {    styleObject: {      activeColor: 'red',      fontSize: 30    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="6-条件渲染"><a href="#6-条件渲染" class="headerlink" title="6. 条件渲染"></a>6. 条件渲染</h4><ol><li><p>v-if</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h1 v-if="awesome"&gt;Vue is awesome!&lt;/h1&gt;&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>v-else</p></li><li><p>v-else-if</p></li><li><p>用key管理可复用的元素</p><ul><li>添加唯一值<code>key</code>：表示两个元素完全独立不要复用</li></ul></li><li><p>v-show</p><ul><li>会创建DOM元素</li><li>满足条件显示，否则隐藏</li></ul></li><li><p>如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p></li><li><p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></p></li></ol><hr><h4 id="7-列表渲染"><a href="#7-列表渲染" class="headerlink" title="7. 列表渲染"></a>7. 列表渲染</h4><ol><li><p>基本使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for="item in items" :key="item.message"&gt;    {{ item.message }}  &lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>可选第二个参数，索引</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for="(item, index) in items"&gt;  {{ parentMessage }} - {{ index }} - {{ item.message }}&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>of</code> 替代 <code>in</code> 作为分隔符</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div v-for="item of items"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>遍历对象</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 值，属性&lt;div v-for="(value, name) in object"&gt;  {{ name }}: {{ value }}&lt;/div&gt;// 值，属性，下标&lt;div v-for="(value, name, index) in object"&gt;  {{ index }}. {{ name }}: {{ value }}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>维护状态</strong></p><ul><li>添加<code>key</code>值</li></ul></li><li><p>数组更新检测</p><ul><li>变更方法<ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li><li>替换数组:不会变更原始数据，而总是返回一个新数组<ul><li>filter()：过滤</li><li>concat()：</li><li>slice()</li></ul></li></ul></li></ol><hr><h4 id="8-事件处理"><a href="#8-事件处理" class="headerlink" title="8. 事件处理"></a>8. 事件处理</h4><ol><li><p>监听事件：v-on</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button v-on:click="counter += 1"&gt;Add 1&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>事件处理方法</p><ul><li>event: 原生DOM事件</li><li>this：指向Vue实例</li></ul></li><li><p>内联处理器中的方法</p><ol><li><p>直接绑定<code>&lt;button v-on:click="say('hi')"&gt;Say hi&lt;/button&gt;</code></p></li><li><p>$event：DOM事件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button v-on:click="warn('Form cannot be submitted yet.', $event)"&gt;  Submit&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>事件修饰符</p><ul><li><p>.stop</p></li><li><p>.prevent</p></li><li><p>.capture</p></li><li><p>.self</p></li><li><p>.once</p></li><li><p>.passive</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 修饰符可以串联 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 只有修饰符 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><span class="token comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p></li></ul></li><li><p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><span class="token comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><span class="token comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>scroll.passive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onScroll<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>按键修饰符</p><ol><li><p>keyCode</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul></li><li><p><code>config.keyCodes</code> 对象<a href="https://cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token number">112</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>系统修饰符</p><ul><li><p><code>.ctrl</code></p></li><li><p><code>.alt</code></p></li><li><p><code>.shift</code></p></li><li><p><code>.meta</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- Alt + C --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.alt.67</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- Ctrl + Click --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>exact</code>修饰符</p><ol><li><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onCtrlClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>鼠标按钮修饰符</p><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul></li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由</title>
      <link href="2021/03/29/Vue%E8%B7%AF%E7%94%B1/"/>
      <url>2021/03/29/Vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Vue中的路由"><a href="#一、Vue中的路由" class="headerlink" title="一、Vue中的路由"></a>一、Vue中的路由</h4><ol><li><p>定义：通过互联的网络把信息从源地址传输道目的地址的活动。</p><ul><li>IP地址：标识</li><li>映射表：mac地址，唯一标识</li><li>路由器：管理ip</li></ul></li><li><p>什么是前端渲染，什么是后端渲染？</p><ol><li><p>后端渲染：<code>jsp/php</code>，比较混乱。</p></li><li><p>前后端分离阶段：<code>Ajax</code></p><ul><li><p>后端只负责提供数据，不负责任何阶段的内容。</p><img src="C:\Users\skyblue\AppData\Roaming\Typora\typora-user-images\image-20210329124814619.png" alt="image-20210329124814619" style="zoom:50%;"></li></ul></li><li><p>SPA页面(单页面富应用)</p><ol><li>整个网页只有一个html页面</li><li>特点：在前后端分离的基础上加了一层前端路由，前端来维护一套路由规则</li><li>前端路由核心：<ul><li><strong>改变URL，但是页面不进行整体的刷新</strong></li></ul></li></ol></li></ol></li></ol><hr><h4 id="二、-vue-router"><a href="#二、-vue-router" class="headerlink" title="二、 vue-router"></a>二、 vue-router</h4><ol><li><p>使用步骤</p><ol><li><p>导入路由对象，并且调用Vue.use(VueRouter)</p><ul><li>安装：<code>yarn add vue-router --save</code></li><li>创建router文件夹，在其中创建index.js文件。</li></ul></li><li><p>创建路由实例，并且传入路由映射配置。</p></li><li><p>在Vue实例中挂载创建的路由实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 导入路由相关的配置</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 1.通过Vue.use(插件)，安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">// 2.设置路由映射关系</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 3.创建实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'history'</span> <span class="token comment">// 使用history模式。去除#</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 4.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token comment">// 5.在main.js导入router</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>routes映射对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">// 路由地址</span>        component<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 组件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        redirect<span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">// 重定向路由地址,一般用于配置默认页面</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.vue中使用：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 方式一：&lt;router-link&gt;&lt;/router-link&gt;,最终被渲染成&lt;a&gt;&lt;/a&gt;标签&lt;router-link to="/home"&gt;&lt;/router-link&gt; // 方式二：绑定点击事件// 必须使用&lt;router-view&gt;&lt;/router-view&gt; // 渲染router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>to: 跳转 </li><li>tag: 指定渲染成什么组件</li><li>replace：关闭返回</li></ol></li><li><p>路由中：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// index.js文件...linkActiveClass: '' // 统一修改属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router-tabbar</title>
      <link href="2021/03/27/Vue-router-tabbar/"/>
      <url>2021/03/27/Vue-router-tabbar/</url>
      
        <content type="html"><![CDATA[<h4 id="一-banner模块的编写"><a href="#一-banner模块的编写" class="headerlink" title="一. banner模块的编写"></a>一. banner模块的编写</h4><ol><li><p>创建tabbar组件，在tabbar组件中创建插槽slot</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"tabbar"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span></li><li><p>tabbar组件中插槽对应的TabbarItem组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tabbar-item"</span> @click<span class="token operator">=</span><span class="token string">"itemClick"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!isActive"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-active-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{active: isActive}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-text"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在TabbarItem组件中配置插槽给App.vue组件预留位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-active-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-text"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>App组件中导入Tabbar和 TabbarItem组件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Tabbar <span class="token keyword">from</span> <span class="token string">"./components/tabbar/Tabbar.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TabbarItem <span class="token keyword">from</span> <span class="token string">"./components/tabbar/TabbarItem.vue"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>table<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中导入css文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>@<span class="token keyword">import</span> <span class="token string">"文件路径"</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="二-router路由的配置"><a href="#二-router路由的配置" class="headerlink" title="二. router路由的配置"></a>二. router路由的配置</h4><ol><li><p>下载vue-router包</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add vue<span class="token operator">-</span>router <span class="token operator">--</span>save <span class="token operator">*</span> <span class="token operator">--</span>save 运行环境<span class="token operator">*</span> <span class="token operator">--</span>dev 开发环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在router文件夹中创建index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment">// 1.安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span> <span class="token comment">// VueRouter.install</span><span class="token comment">// 2.创建路由对象</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 不能加r</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>routes<span class="token punctuation">,</span>mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.导出router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在main.js中导入router即可</p></li><li><p>routes中：<code>path：路由地址</code>，<code>redirect: 重定向</code>，<code>component: 对应组件</code></p></li><li><p>导入路由组件懒加载方式：```const Home = () =&gt; import(‘地址’)</p></li><li><p>使用路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 标签添加点击属性</span><span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"itemClick"</span><span class="token operator">&gt;</span>    内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token comment">// 在script点击事件中添加路由路径</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">{</span>            path<span class="token operator">:</span> String <span class="token comment">// 规定父传子的数据格式</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>                <span class="token comment">// 判断点击是否是当前路由。</span>                <span class="token comment">// $route 表示当前活跃的路由</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">itemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>                <span class="token comment">// $router 全局变量</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ol><li><p>多次点击同一路由console报错：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在main.js中添加</span><span class="token comment">// 防止点击两次报错</span><span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> originalReplace <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>replace<span class="token punctuation">;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">replace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">originalReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意组件之间的抽离。不同功能页面文件的划分</p></li><li><p>注意views文件夹的规划</p></li><li><p>父传子props：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">{</span>    path<span class="token operator">:</span> String<span class="token punctuation">,</span>    activeColor<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"red"</span> <span class="token comment">// 父组件默认值会覆盖子组件，需要用函数返回出去</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当传入的属性值过于长时，可以使用计算属性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">activeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">?</span> <span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeColor<span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据父组件传过来的颜色值来显示点击时<code>tabbarItem</code>的文本颜色</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli</title>
      <link href="2021/03/26/vue-cli/"/>
      <url>2021/03/26/vue-cli/</url>
      
        <content type="html"><![CDATA[<h4 id="这是Vue-cli"><a href="#这是Vue-cli" class="headerlink" title="这是Vue-cli"></a>这是Vue-cli</h4>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Magisk</title>
      <link href="2021/03/26/Magisk/"/>
      <url>2021/03/26/Magisk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习记录</title>
      <link href="2021/03/26/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/03/26/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue学习记录"><a href="#Vue学习记录" class="headerlink" title="Vue学习记录"></a>Vue学习记录</h2>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自建hexo+github</title>
      <link href="2021/03/25/%E8%87%AA%E5%BB%BAhexo+github/"/>
      <url>2021/03/25/%E8%87%AA%E5%BB%BAhexo+github/</url>
      
        <content type="html"><![CDATA[<h2 id="一-必备"><a href="#一-必备" class="headerlink" title="一. 必备"></a>一. 必备</h2><ol><li>Nodejs</li><li>Git</li><li>github</li></ol><hr><p><em><span id="more"></span></em></p><h2 id="二-创建部署Hexo"><a href="#二-创建部署Hexo" class="headerlink" title="二. 创建部署Hexo"></a>二. 创建部署Hexo</h2><ol><li>创建一个空的文件夹用于存储，例：blog</li><li>NPM安装hexo：npm install -g(全局) hexo</li><li>测试：hexo </li></ol><hr><h2 id="三-初始化Hexo"><a href="#三-初始化Hexo" class="headerlink" title="三. 初始化Hexo"></a>三. 初始化Hexo</h2><ol><li>进入创建的文件夹blog</li><li>初始化命令：<code> hexo init</code></li><li>构建Hexo：<code>hexo g</code></li><li>启动Hexo：<code>hexo s</code></li><li>进入：<code>localhost:4000</code></li></ol><hr><h2 id="四-部署Hexo到Github"><a href="#四-部署Hexo到Github" class="headerlink" title="四. 部署Hexo到Github"></a>四. 部署Hexo到Github</h2><ol><li><p>创建Github账号以及仓库(仓库名称要以github.io为结尾)。</p></li><li><p>win10创建密钥：ssh-keygen -t rsa -C “GitHub 邮箱”。</p></li><li><p>win10查看密钥：cat ~/.ssh/id_rsa.pub</p></li><li><p>github配置密钥：账号 -&gt; 设置 -&gt; SSH and GPG keys</p></li><li><p>修改本地配置文件：_config.yml -&gt; 末尾 -&gt; </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span><span class="token key atrule">repo</span><span class="token punctuation">:</span> github仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>开始提交到github：<code>hexo d</code></p></li><li><p>访问链接：仓库-&gt; Settings -&gt; GitHub Pages 选择分支，目录。保存即可出现链接</p></li></ol><hr><h2 id="五-注意事项"><a href="#五-注意事项" class="headerlink" title="五. 注意事项"></a>五. 注意事项</h2><ol><li><p>部署成功后访问github.io出现图片加载失败：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">_config.yml -&gt; URL注释下 -&gt; root</span><span class="token punctuation">:</span> /仓库名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更改主题：theme: 主题名</p></li><li><p>清除：<code>hexo clean</code></p></li><li><p>重新构建部署：<code>hexo g -d </code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
