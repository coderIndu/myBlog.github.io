<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue路由</title>
      <link href="2021/03/29/Vue%E8%B7%AF%E7%94%B1/"/>
      <url>2021/03/29/Vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Vue中的路由"><a href="#一、Vue中的路由" class="headerlink" title="一、Vue中的路由"></a>一、Vue中的路由</h4><ol><li><p>定义：通过互联的网络把信息从源地址传输道目的地址的活动。</p><ul><li>IP地址：标识</li><li>映射表：mac地址，唯一标识</li><li>路由器：管理ip</li></ul></li><li><p>什么是前端渲染，什么是后端渲染？</p><ol><li><p>后端渲染：<code>jsp/php</code>，比较混乱。</p></li><li><p>前后端分离阶段：<code>Ajax</code></p><ul><li><p>后端只负责提供数据，不负责任何阶段的内容。</p><img src="C:\Users\skyblue\AppData\Roaming\Typora\typora-user-images\image-20210329124814619.png" alt="image-20210329124814619" style="zoom:50%;"></li></ul></li><li><p>SPA页面(单页面富应用)</p><ol><li>整个网页只有一个html页面</li><li>特点：在前后端分离的基础上加了一层前端路由，前端来维护一套路由规则</li><li>前端路由核心：<ul><li><strong>改变URL，但是页面不进行整体的刷新</strong></li></ul></li></ol></li></ol></li></ol><hr><h4 id="二、-vue-router"><a href="#二、-vue-router" class="headerlink" title="二、 vue-router"></a>二、 vue-router</h4><ol><li><p>使用步骤</p><ol><li><p>导入路由对象，并且调用Vue.use(VueRouter)</p><ul><li>安装：<code>yarn add vue-router --save</code></li><li>创建router文件夹，在其中创建index.js文件。</li></ul></li><li><p>创建路由实例，并且传入路由映射配置。</p></li><li><p>在Vue实例中挂载创建的路由实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 导入路由相关的配置</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 1.通过Vue.use(插件)，安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">// 2.设置路由映射关系</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 3.创建实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'history'</span> <span class="token comment">// 使用history模式。去除#</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 4.导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token comment">// 5.在main.js导入router</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>routes映射对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">// 路由地址</span>        component<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 组件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        redirect<span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">// 重定向路由地址,一般用于配置默认页面</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.vue中使用：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 方式一：&lt;router-link&gt;&lt;/router-link&gt;,最终被渲染成&lt;a&gt;&lt;/a&gt;标签&lt;router-link to="/home"&gt;&lt;/router-link&gt; // 方式二：绑定点击事件// 必须使用&lt;router-view&gt;&lt;/router-view&gt; // 渲染router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>to: 跳转 </li><li>tag: 指定渲染成什么组件</li><li>replace：关闭返回</li></ol></li></ul><p>​    </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router-tabbar</title>
      <link href="2021/03/27/Vue-router-tabbar/"/>
      <url>2021/03/27/Vue-router-tabbar/</url>
      
        <content type="html"><![CDATA[<h4 id="一-banner模块的编写"><a href="#一-banner模块的编写" class="headerlink" title="一. banner模块的编写"></a>一. banner模块的编写</h4><ol><li><p>创建tabbar组件，在tabbar组件中创建插槽slot</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"tabbar"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span></li><li><p>tabbar组件中插槽对应的TabbarItem组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tabbar-item"</span> @click<span class="token operator">=</span><span class="token string">"itemClick"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!isActive"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-active-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{active: isActive}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-text"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在TabbarItem组件中配置插槽给App.vue组件预留位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-active-icon"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-text"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>App组件中导入Tabbar和 TabbarItem组件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Tabbar <span class="token keyword">from</span> <span class="token string">"./components/tabbar/Tabbar.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TabbarItem <span class="token keyword">from</span> <span class="token string">"./components/tabbar/TabbarItem.vue"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>table<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中导入css文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>@<span class="token keyword">import</span> <span class="token string">"文件路径"</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="二-router路由的配置"><a href="#二-router路由的配置" class="headerlink" title="二. router路由的配置"></a>二. router路由的配置</h4><ol><li><p>下载vue-router包</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add vue<span class="token operator">-</span>router <span class="token operator">--</span>save <span class="token operator">*</span> <span class="token operator">--</span>save 运行环境<span class="token operator">*</span> <span class="token operator">--</span>dev 开发环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在router文件夹中创建index.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment">// 1.安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span> <span class="token comment">// VueRouter.install</span><span class="token comment">// 2.创建路由对象</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 不能加r</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>routes<span class="token punctuation">,</span>mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 3.导出router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在main.js中导入router即可</p></li><li><p>routes中：<code>path：路由地址</code>，<code>redirect: 重定向</code>，<code>component: 对应组件</code></p></li><li><p>导入路由组件懒加载方式：```const Home = () =&gt; import(‘地址’)</p></li><li><p>使用路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 标签添加点击属性</span><span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"itemClick"</span><span class="token operator">&gt;</span>    内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token comment">// 在script点击事件中添加路由路径</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">{</span>            path<span class="token operator">:</span> String <span class="token comment">// 规定父传子的数据格式</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>                <span class="token comment">// 判断点击是否是当前路由。</span>                <span class="token comment">// $route 表示当前活跃的路由</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">itemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>                <span class="token comment">// $router 全局变量</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ol><li><p>多次点击同一路由console报错：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在main.js中添加</span><span class="token comment">// 防止点击两次报错</span><span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> originalReplace <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>replace<span class="token punctuation">;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">replace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">originalReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意组件之间的抽离。不同功能页面文件的划分</p></li><li><p>注意views文件夹的规划</p></li><li><p>父传子props：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">{</span>    path<span class="token operator">:</span> String<span class="token punctuation">,</span>    activeColor<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"red"</span> <span class="token comment">// 父组件默认值会覆盖子组件，需要用函数返回出去</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当传入的属性值过于长时，可以使用计算属性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">activeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">?</span> <span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeColor<span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据父组件传过来的颜色值来显示点击时<code>tabbarItem</code>的文本颜色</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli</title>
      <link href="2021/03/26/vue-cli/"/>
      <url>2021/03/26/vue-cli/</url>
      
        <content type="html"><![CDATA[<h4 id="这是Vue-cli"><a href="#这是Vue-cli" class="headerlink" title="这是Vue-cli"></a>这是Vue-cli</h4>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Magisk</title>
      <link href="2021/03/26/Magisk/"/>
      <url>2021/03/26/Magisk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习记录</title>
      <link href="2021/03/26/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/03/26/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue学习记录"><a href="#Vue学习记录" class="headerlink" title="Vue学习记录"></a>Vue学习记录</h2>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自建hexo+github</title>
      <link href="2021/03/25/%E8%87%AA%E5%BB%BAhexo+github/"/>
      <url>2021/03/25/%E8%87%AA%E5%BB%BAhexo+github/</url>
      
        <content type="html"><![CDATA[<h2 id="一-必备"><a href="#一-必备" class="headerlink" title="一. 必备"></a>一. 必备</h2><ol><li>Nodejs</li><li>Git</li><li>github</li></ol><hr><p><em><span id="more"></span></em></p><h2 id="二-创建部署Hexo"><a href="#二-创建部署Hexo" class="headerlink" title="二. 创建部署Hexo"></a>二. 创建部署Hexo</h2><ol><li>创建一个空的文件夹用于存储，例：blog</li><li>NPM安装hexo：npm install -g(全局) hexo</li><li>测试：hexo </li></ol><hr><h2 id="三-初始化Hexo"><a href="#三-初始化Hexo" class="headerlink" title="三. 初始化Hexo"></a>三. 初始化Hexo</h2><ol><li>进入创建的文件夹blog</li><li>初始化命令：<code> hexo init</code></li><li>构建Hexo：<code>hexo g</code></li><li>启动Hexo：<code>hexo s</code></li><li>进入：<code>localhost:4000</code></li></ol><hr><h2 id="四-部署Hexo到Github"><a href="#四-部署Hexo到Github" class="headerlink" title="四. 部署Hexo到Github"></a>四. 部署Hexo到Github</h2><ol><li><p>创建Github账号以及仓库(仓库名称要以github.io为结尾)。</p></li><li><p>win10创建密钥：ssh-keygen -t rsa -C “GitHub 邮箱”。</p></li><li><p>win10查看密钥：cat ~/.ssh/id_rsa.pub</p></li><li><p>github配置密钥：账号 -&gt; 设置 -&gt; SSH and GPG keys</p></li><li><p>修改本地配置文件：_config.yml -&gt; 末尾 -&gt; </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span><span class="token key atrule">repo</span><span class="token punctuation">:</span> github仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>开始提交到github：<code>hexo d</code></p></li><li><p>访问链接：仓库-&gt; Settings -&gt; GitHub Pages 选择分支，目录。保存即可出现链接</p></li></ol><hr><h2 id="五-注意事项"><a href="#五-注意事项" class="headerlink" title="五. 注意事项"></a>五. 注意事项</h2><ol><li><p>部署成功后访问github.io出现图片加载失败：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">_config.yml -&gt; URL注释下 -&gt; root</span><span class="token punctuation">:</span> /仓库名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更改主题：theme: 主题名</p></li><li><p>清除：<code>hexo clean</code></p></li><li><p>重新构建部署：<code>hexo g -d </code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
